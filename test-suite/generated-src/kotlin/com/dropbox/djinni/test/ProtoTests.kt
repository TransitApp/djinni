// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proto.djinni

package com.dropbox.djinni.test

import com.snapchat.djinni.NativeObjectManager
import djinni.test.Test.AddressBook
import djinni.test.Test.Person
import djinni.test2.Test2.PersistingState
import java.util.ArrayList
import java.util.concurrent.atomic.AtomicBoolean

abstract class ProtoTests {

    companion object {
        @kotlin.jvm.JvmStatic
        external fun protoToStrings(x: AddressBook): ArrayList<String>

        @kotlin.jvm.JvmStatic
        external fun stringsToProto(x: ArrayList<String>): AddressBook

        @kotlin.jvm.JvmStatic
        external fun embeddedProtoToString(x: RecordWithEmbeddedProto): String

        @kotlin.jvm.JvmStatic
        external fun stringToEmbeddedProto(x: String): RecordWithEmbeddedProto

        @kotlin.jvm.JvmStatic
        external fun cppProtoToString(x: PersistingState): String

        @kotlin.jvm.JvmStatic
        external fun stringToCppProto(x: String): PersistingState

        @kotlin.jvm.JvmStatic
        external fun embeddedCppProtoToString(x: RecordWithEmbeddedCppProto): String

        @kotlin.jvm.JvmStatic
        external fun stringToEmbeddedCppProto(x: String): RecordWithEmbeddedCppProto

        @kotlin.jvm.JvmStatic
        external fun protoListToStrings(x: ArrayList<Person>): ArrayList<String>

        @kotlin.jvm.JvmStatic
        external fun stringsToProtoList(x: ArrayList<String>): ArrayList<Person>

        @kotlin.jvm.JvmStatic
        external fun optionalProtoToString(x: Person?): String

        @kotlin.jvm.JvmStatic
        external fun stringToOptionalProto(x: String): Person?

        @kotlin.jvm.JvmStatic
        external fun stringToProtoOutcome(x: String): com.snapchat.djinni.Outcome<Person, Int>
    }

    class CppProxy(private val nativeRef: Long) : ProtoTests() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }
    }
}
